{"version":3,"sources":["logo.svg","lookup/components.js","tweets/buttons.js","tweets/lookup.js","tweets/create.js","tweets/detail.js","tweets/list.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","status","response","detail","window","location","href","onerror","e","send","ActionBtn","props","tweet","action","didPerformAction","likes","className","actionDisplay","display","handleActionBackendEvent","type","onClick","event","preventDefault","tweetId","id","apiTweetAction","TweetCreate","textAreaRef","React","createRef","didTweet","handleBackendUpdate","console","log","alert","onSubmit","newVal","current","value","content","ref","required","ParentTweet","parent","Tweet","hideActions","didRetweet","useState","actionTweet","setActionTweet","match","pathname","urlTweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","Fragment","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","tweetsDidSet","setTweetsDidSet","useEffect","final","newTweets","concat","username","apiTweetList","handleDidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","map","item","index","key","TweetsComponent","setNewTweets","canTweet","tempNewTweets","TweetDetailComponent","didLookup","setDidLookup","setTweet","handleBackendLookup","apiTweetDetail","App","src","logo","alt","target","rel","Boolean","hostname","appEl","getElementById","ReactDOM","render","createElement","tweetsEl","dataset","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,kC,gLCiBpC,SAASC,EAAcC,EAAQC,EAAUC,EAAUC,GACtD,IAAIC,EACAD,IACAC,EAAWC,KAAKC,UAAUH,IAE9B,IAAMI,EAAM,IAAIC,eACVC,EAAG,mCAA+BR,GACxCM,EAAIG,aAAe,OACnB,IAAMC,EAzBV,SAAmBC,GACf,IAAIC,EAAc,KAClB,GAAIC,SAASC,QAA8B,KAApBD,SAASC,OAE5B,IADA,IAAIC,EAAUF,SAASC,OAAOE,MAAM,KAC3BC,EAAI,EAAGA,EAAIF,EAAQG,OAAQD,IAAK,CACrC,IAAIH,EAASC,EAAQE,GAAGE,OAExB,GAAIL,EAAOM,UAAU,EAAGT,EAAKO,OAAS,KAAQP,EAAO,IAAM,CACvDC,EAAcS,mBAAmBP,EAAOM,UAAUT,EAAKO,OAAS,IAChE,OAIZ,OAAON,EAYWU,CAAU,aAC5BhB,EAAIiB,KAAKxB,EAAQS,GACjBF,EAAIkB,iBAAiB,eAAgB,oBAEjCd,IAEAJ,EAAIkB,iBAAiB,mBAAoB,kBACzClB,EAAIkB,iBAAiB,cAAed,IAGxCJ,EAAImB,OAAS,WACU,MAAfnB,EAAIoB,SAEW,kDADApB,EAAIqB,SAASC,SAExBC,OAAOC,SAASC,KAAO,kCAG/B9B,EAASK,EAAIqB,SAAUrB,EAAIoB,SAE/BpB,EAAI0B,QAAU,SAAUC,GACpBhC,EAAS,CAAC,QAAW,4BAA6B,MAEtDK,EAAI4B,KAAK/B,GC5CN,SAASgC,EAAUC,GAAQ,IACvBC,EAAmCD,EAAnCC,MAAOC,EAA4BF,EAA5BE,OAAQC,EAAoBH,EAApBG,iBAChBC,EAAQH,EAAMG,MAAQH,EAAMG,MAAQ,EACpCC,EAAYL,EAAMK,UAAYL,EAAMK,UAAY,yBAChDC,EAAgBJ,EAAOK,QAAUL,EAAOK,QAAU,SAElDC,EAA2B,SAACjB,EAAUD,GACxB,MAAXA,GAA6B,MAAXA,IAAmBa,GACtCA,EAAiBZ,EAAUD,IAO7BiB,EAA0B,SAAhBL,EAAOO,KAAP,UAA4BL,EAA5B,YAAqCE,GAAkBA,EACvE,OAAO,4BAAQD,UAAWA,EAAWK,QALjB,SAACC,GACjBA,EAAMC,iBCTP,SAAwBC,EAASX,EAAQrC,GAE5CH,EAAc,OAAQ,kBAAmBG,EAD5B,CAACiD,GAAID,EAASX,OAAQA,IDS/Ba,CAAed,EAAMa,GAAIZ,EAAOO,KAAMD,KAGkBD,G,kBEdzD,SAASS,EAAYhB,GACxB,IAAMiB,EAAcC,IAAMC,YACnBC,EAAYpB,EAAZoB,SACDC,EAAsB,SAAC9B,EAAUD,GACpB,MAAXA,EACA8B,EAAS7B,IAET+B,QAAQC,IAAIhC,GACZiC,MAAM,wCAUd,OAAO,yBAAKnB,UAAWL,EAAMK,WACzB,0BAAMoB,SAPW,SAACd,GAClBA,EAAMC,iBACN,IAAMc,EAAST,EAAYU,QAAQC,MDhBvClE,EAAc,OAAQ,kBCiBK2D,EDjBwB,CAACQ,QCiBjCH,IACfT,EAAYU,QAAQC,MAAQ,KAIpB,8BAAUE,IAAKb,EAAac,UAAU,EAAM1B,UAAU,eAAe9B,KAAK,UAG9E,4BAAQkC,KAAK,SAASJ,UAAU,wBAAhC,W,WCxBL,SAAS2B,EAAYhC,GAAQ,IACzBC,EAASD,EAATC,MACP,OAAOA,EAAMgC,OAAS,yBAAK5B,UAAU,OACjC,yBAAKA,UAAU,qCACX,uBAAGA,UAAU,yBAAb,WACA,kBAAC6B,EAAD,CAAOC,aAAW,EAAC9B,UAAW,IAAKJ,MAAOA,EAAMgC,WAE/C,KAGN,SAASC,EAAMlC,GAAQ,IACnBC,EAAkCD,EAAlCC,MAAOmC,EAA2BpC,EAA3BoC,WAAYD,EAAenC,EAAfmC,YADD,EAEaE,mBAASrC,EAAMC,MAAQD,EAAMC,MAAQ,MAFlD,mBAElBqC,EAFkB,KAELC,EAFK,KAGnBlC,EAAYL,EAAMK,UAAYL,EAAMK,UAAY,0BAEhDmC,EADO/C,OAAOC,SAAS+C,SACVD,MAAL,YAAW,WAAX,cACRE,EAAaF,EAAQA,EAAMG,OAAOC,SAAW,EAC7CC,EAAW,UAAG5C,EAAMa,MAAT,UAAqB4B,GAKhCI,EAAsB,SAACC,EAAgBzD,GAC1B,MAAXA,EACAiD,EAAeQ,GACG,MAAXzD,GACH8C,GACAA,EAAWW,IAKvB,OAAO,yBAAK1C,UAAWA,GACnB,6BACI,2BAAIJ,EAAMa,GAAV,MAAiBb,EAAM4B,SACvB,kBAACG,EAAD,CAAa/B,MAAOA,KAExB,yBAAKI,UAAU,iBACTiC,IAA+B,IAAhBH,GAAyB,kBAAC,IAAMa,SAAP,KACtC,kBAACjD,EAAD,CAAWE,MAAOqC,EAAanC,iBAAkB2C,EACtC5C,OAAQ,CAACO,KAAM,OAAQF,QAAS,WAC3C,kBAACR,EAAD,CAAWE,MAAOqC,EAAanC,iBAAkB2C,EACtC5C,OAAQ,CAACO,KAAM,SAAUF,QAAS,YAC7C,kBAACR,EAAD,CAAWE,MAAOqC,EAAanC,iBAAkB2C,EACtC5C,OAAQ,CAACO,KAAM,UAAWF,QAAS,eAGpC,IAAbsC,EAAoB,KAAO,4BAAQxC,UAAU,iCAAiCK,QA7BpE,SAACC,GAChBA,EAAMC,iBACNnB,OAAOC,SAASC,KAAhB,WAA2BM,EAAMa,MA2BD,UC7CjC,SAASmC,EAAWjD,GAAQ,IAAD,EACMqC,mBAAS,IADf,mBACvBa,EADuB,KACXC,EADW,OAEFd,mBAAS,IAFP,mBAEvBe,EAFuB,KAEfC,EAFe,OAGUhB,oBAAS,GAHnB,mBAGvBiB,EAHuB,KAGTC,EAHS,KAI9BC,qBAAU,WACN,IAAMC,EAAQ,YAAIzD,EAAM0D,WAAWC,OAAOT,GACtCO,EAAM3E,SAAWsE,EAAOtE,QACxBuE,EAAUI,KAEf,CAACzD,EAAM0D,UAAWN,EAAQF,IAE7BM,qBAAU,WACN,IAAqB,IAAjBF,EAAwB,EHH7B,SAAsBM,EAAU/F,GACnC,IAAID,EAAW,WACXgG,IACAhG,EAAQ,4BAAwBgG,IAEpClG,EAAc,MAAOE,EAAUC,GGOvBgG,CAAa7D,EAAM4D,UARW,SAACrE,EAAUD,GACtB,MAAXA,GACA6D,EAAc5D,GACdgE,GAAgB,IAEhB/B,MAAM,4BAKnB,CAAC0B,EAAYI,EAAcC,EAAiBvD,EAAM4D,WAErD,IAAME,EAAmB,SAACC,GACtB,IAAMC,EAAgB,YAAOd,GAC7Bc,EAAiBC,QAAQF,GACzBZ,EAAca,GACd,IAAME,EAAiB,YAAOd,GAC9Bc,EAAkBD,QAAQb,GAC1BC,EAAUa,IAGd,OAAOd,EAAOe,KAAI,SAACC,EAAMC,GACrB,OAAO,kBAACnC,EAAD,CACHjC,MAAOmE,EACPhC,WAAY0B,EACZzD,UAAU,sCACViE,IAAG,UAAKD,EAAL,mBCtCR,SAASE,EAAgBvE,GAAQ,IAAD,EACDqC,mBAAS,IADR,mBAC5BqB,EAD4B,KACjBc,EADiB,KAE7BC,EAA8B,UAAnBzE,EAAMyE,SAMvB,OAAO,yBAAKpE,UAAWL,EAAMK,YACX,IAAboE,GAAqB,kBAACzD,EAAD,CAAaI,SANhB,SAAC2C,GACpB,IAAIW,EAAa,YAAOhB,GACxBgB,EAAcT,QAAQF,GACtBS,EAAaE,IAGgDrE,UAAU,gBACvE,kBAAC4C,EAAD,eAAYS,UAAWA,GAAe1D,KAIvC,SAAS2E,EAAqB3E,GAAQ,IAClCa,EAAWb,EAAXa,QADiC,EAENwB,oBAAS,GAFH,mBAEjCuC,EAFiC,KAEtBC,EAFsB,OAGdxC,mBAAS,MAHK,mBAGjCpC,EAHiC,KAG1B6E,EAH0B,KAKlCC,EAAsB,SAACxF,EAAUD,GACpB,MAAXA,EACAwF,EAASvF,GAETiC,MAAM,2CAUd,OAPAgC,qBAAU,YACY,IAAdoB,KJvBL,SAAwB/D,EAAShD,GACpCH,EAAc,MAAD,kBAAmBmD,EAAnB,KAA+BhD,GIuBpCmH,CAAenE,EAASkE,GACxBF,GAAa,MAElB,CAAChE,EAAS+D,EAAWC,IAEP,OAAV5E,EAAiB,KAAO,kBAACiC,EAAD,CAAOjC,MAAOA,EAAOI,UAAWL,EAAMK,YCR1D4E,MAzBf,WAEI,OACI,yBAAK5E,UAAU,OACX,4BAAQA,UAAU,cACd,yBAAK6E,IAAKC,IAAM9E,UAAU,WAAW+E,IAAI,SACzC,mCACS,4CADT,wBAGA,6BACI,kBAACb,EAAD,OAEJ,uBACIlE,UAAU,WACVV,KAAK,sBACL0F,OAAO,SACPC,IAAI,uBAJR,kBCPIC,QACW,cAA7B9F,OAAOC,SAAS8F,UAEe,UAA7B/F,OAAOC,SAAS8F,UAEhB/F,OAAOC,SAAS8F,SAAShD,MACvB,2DCVN,IAAMiD,EAAQhH,SAASiH,eAAe,QAClCD,GACAE,IAASC,OAAO,kBAAC,EAAD,MAAQH,GAE5B,IAAM5F,EAAIqB,IAAM2E,cACVC,EAAWrH,SAASiH,eAAe,aACrCI,GACAH,IAASC,OAAO/F,EAAE0E,EAAiBuB,EAASC,SAAUD,GAG9BrH,SAASuH,iBAAiB,qBAElCC,SAAQ,SAAAC,GACxBP,IAASC,OAAO/F,EAAE8E,EAAsBuB,EAAUH,SAAUG,MD8G1D,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpF,QAAQoF,MAAMA,EAAMC,c","file":"static/js/main.3e381805.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function getCookie(name) {\r\n    var cookieValue = null;\r\n    if (document.cookie && document.cookie !== '') {\r\n        var cookies = document.cookie.split(';');\r\n        for (var i = 0; i < cookies.length; i++) {\r\n            var cookie = cookies[i].trim();\r\n            // Does this cookie string begin with the name we want?\r\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return cookieValue;\r\n}\r\n\r\n\r\nexport function backendLookup(method, endpoint, callback, data) {\r\n    let jsonData;\r\n    if (data) {\r\n        jsonData = JSON.stringify(data)\r\n    }\r\n    const xhr = new XMLHttpRequest()\r\n    const url = `http://localhost:8000/api${endpoint}`\r\n    xhr.responseType = \"json\"\r\n    const csrftoken = getCookie('csrftoken');\r\n    xhr.open(method, url)\r\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\")\r\n\r\n    if (csrftoken) {\r\n        // xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\r\n        xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\r\n        xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\r\n    }\r\n\r\n    xhr.onload = function () {\r\n        if (xhr.status === 403) {\r\n            const detail = xhr.response.detail\r\n            if (detail === \"Authentication credentials were not provided.\") {\r\n                window.location.href = \"/login?showLoginRequired=true\"\r\n            }\r\n        }\r\n        callback(xhr.response, xhr.status)\r\n    }\r\n    xhr.onerror = function (e) {\r\n        callback({\"massage\": \"The request was an error\"}, 400)\r\n    }\r\n    xhr.send(jsonData)\r\n}\r\n\r\n","import {apiTweetAction} from \"./lookup\";\r\nimport React from \"react\";\r\n\r\nexport function ActionBtn(props) {\r\n    const {tweet, action, didPerformAction} = props\r\n    const likes = tweet.likes ? tweet.likes : 0\r\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\r\n    const actionDisplay = action.display ? action.display : 'Action'\r\n\r\n    const handleActionBackendEvent = (response, status) => {\r\n        if ((status === 200 || status === 201) && didPerformAction) {\r\n            didPerformAction(response, status)\r\n        }\r\n    }\r\n    const handleClick = (event) => {\r\n        event.preventDefault()\r\n        apiTweetAction(tweet.id, action.type, handleActionBackendEvent)\r\n    }\r\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\r\n    return <button className={className} onClick={handleClick}>{display}</button>\r\n}\r\n","import {backendLookup} from \"../lookup\";\r\n\r\nexport function apiTweetCreate(newTweet, callback) {\r\n    backendLookup(\"POST\", \"/tweets/create/\", callback, {content: newTweet})\r\n}\r\n\r\nexport function apiTweetAction(tweetId, action, callback) {\r\n    const data = {id: tweetId, action: action}\r\n    backendLookup(\"POST\", \"/tweets/action/\", callback, data)\r\n}\r\n\r\nexport function apiTweetDetail(tweetId, callback) {\r\n    backendLookup(\"GET\", `/tweets/${tweetId}/`, callback)\r\n}\r\n\r\nexport function apiTweetList(username, callback) {\r\n    let endpoint = \"/tweets/\"\r\n    if (username) {\r\n        endpoint = `/tweets/?username=${username}`\r\n    }\r\n    backendLookup(\"GET\", endpoint, callback)\r\n}\r\n\r\n","import React from \"react\";\r\n\r\nimport {apiTweetCreate} from \"./lookup\";\r\n\r\n\r\nexport function TweetCreate(props) {\r\n    const textAreaRef = React.createRef()\r\n    const {didTweet} = props\r\n    const handleBackendUpdate = (response, status) => {\r\n        if (status === 201) {\r\n            didTweet(response)\r\n        } else {\r\n            console.log(response)\r\n            alert(\"An error occurred please try again\")\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        const newVal = textAreaRef.current.value\r\n        apiTweetCreate(newVal, handleBackendUpdate)\r\n        textAreaRef.current.value = ''\r\n    }\r\n    return <div className={props.className}>\r\n        <form onSubmit={handleSubmit}>\r\n                <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\r\n\r\n                </textarea>\r\n            <button type='submit' className='btn btn-primary my-3'>Tweet</button>\r\n        </form>\r\n    </div>\r\n}\r\n","import React, {useState} from \"react\";\r\n\r\nimport {ActionBtn} from \"./buttons\";\r\n\r\nexport function ParentTweet(props) {\r\n    const {tweet} = props\r\n    return tweet.parent ? <div className='row'>\r\n        <div className='col-11 mx-auto p-3 border rounded'>\r\n            <p className='mb-0 text-muted small'>Retweet</p>\r\n            <Tweet hideActions className={' '} tweet={tweet.parent}/>\r\n        </div>\r\n    </div> : null\r\n}\r\n\r\nexport function Tweet(props) {\r\n    const {tweet, didRetweet, hideActions} = props\r\n    const [actionTweet, setActionTweet] = useState(props.tweet ? props.tweet : null)\r\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\r\n    const path = window.location.pathname\r\n    const match = path.match(/(?<tweetid>\\d+)/)\r\n    const urlTweetId = match ? match.groups.tweetid : -1\r\n    const isDetail = `${tweet.id}` === `${urlTweetId}`\r\n    const handleLink = (event) => {\r\n        event.preventDefault()\r\n        window.location.href = `/${tweet.id}`\r\n    }\r\n    const handlePerformAction = (newActionTweet, status) => {\r\n        if (status === 200) {\r\n            setActionTweet(newActionTweet)\r\n        } else if (status === 201) {\r\n            if (didRetweet) {\r\n                didRetweet(newActionTweet)\r\n            }\r\n        }\r\n    }\r\n\r\n    return <div className={className} >\r\n        <div>\r\n            <p>{tweet.id} - {tweet.content}</p>\r\n            <ParentTweet tweet={tweet}/>\r\n        </div>\r\n        <div className='btn btn-group'>\r\n            {(actionTweet && hideActions !== true) && <React.Fragment>\r\n                <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction}\r\n                           action={{type: \"like\", display: \"Likes\"}}/>\r\n                <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction}\r\n                           action={{type: \"unlike\", display: \"Unlike\"}}/>\r\n                <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction}\r\n                           action={{type: \"retweet\", display: \"Retweet\"}}/>\r\n            </React.Fragment>\r\n            }\r\n            {isDetail === true ? null : <button className='btn btn-outline-primary btn-sm' onClick={handleLink}>View</button>}\r\n        </div>\r\n\r\n    </div>\r\n}\r\n","import React, {useEffect, useState} from \"react\";\r\n\r\nimport {apiTweetList} from \"./lookup\";\r\n\r\nimport {Tweet} from \"./detail\";\r\n\r\nexport function TweetsList(props) {\r\n    const [tweetsInit, setTweetsInit] = useState([])\r\n    const [tweets, setTweets] = useState([])\r\n    const [tweetsDidSet, setTweetsDidSet] = useState(false)\r\n    useEffect(() => {\r\n        const final = [...props.newTweets].concat(tweetsInit)\r\n        if (final.length !== tweets.length) {\r\n            setTweets(final)\r\n        }\r\n    }, [props.newTweets, tweets, tweetsInit])\r\n\r\n    useEffect(() => {\r\n        if (tweetsDidSet === false) {\r\n            const handleTweetListLookup = (response, status) => {\r\n                if (status === 200) {\r\n                    setTweetsInit(response)\r\n                    setTweetsDidSet(true)\r\n                } else {\r\n                    alert(\"There was an error\")\r\n                }\r\n            }\r\n            apiTweetList(props.username, handleTweetListLookup)\r\n        }\r\n    }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username])\r\n\r\n    const handleDidRetweet = (newTweet) => {\r\n        const updateTweetsInit = [...tweetsInit]\r\n        updateTweetsInit.unshift(newTweet)\r\n        setTweetsInit(updateTweetsInit)\r\n        const updateFinalTweets = [...tweets]\r\n        updateFinalTweets.unshift(tweets)\r\n        setTweets(updateFinalTweets)\r\n    }\r\n\r\n    return tweets.map((item, index) => {\r\n        return <Tweet\r\n            tweet={item}\r\n            didRetweet={handleDidRetweet}\r\n            className='my-5 py-5 border bg-white text-dark'\r\n            key={`${index}-{item.id}`}/>\r\n    })\r\n}\r\n","import React, {useEffect, useState} from \"react\"\r\n\r\nimport {TweetCreate} from \"./create\";\r\nimport {Tweet} from \"./detail\";\r\nimport {apiTweetDetail} from \"./lookup\";\r\nimport {TweetsList} from \"./list\";\r\n\r\nexport function TweetsComponent(props) {\r\n    const [newTweets, setNewTweets] = useState([])\r\n    const canTweet = props.canTweet === \"false\" ? false : true\r\n    const handleNewTweet = (newTweet) => {\r\n        let tempNewTweets = [...newTweets]\r\n        tempNewTweets.unshift(newTweet)\r\n        setNewTweets(tempNewTweets)\r\n    }\r\n    return <div className={props.className}>\r\n        {canTweet === true && <TweetCreate didTweet={handleNewTweet} className='col-12 mb-3'/>}\r\n        <TweetsList newTweets={newTweets} {...props} />\r\n    </div>\r\n}\r\n\r\nexport function TweetDetailComponent(props) {\r\n    const {tweetId} = props\r\n    const [didLookup, setDidLookup] = useState(false)\r\n    const [tweet, setTweet] = useState(null)\r\n\r\n    const handleBackendLookup = (response, status) => {\r\n        if (status === 200) {\r\n            setTweet(response)\r\n        } else {\r\n            alert(\"There was an error finding your tweet.\")\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (didLookup === false) {\r\n            apiTweetDetail(tweetId, handleBackendLookup)\r\n            setDidLookup(true)\r\n        }\r\n    }, [tweetId, didLookup, setDidLookup])\r\n\r\n    return tweet === null ? null : <Tweet tweet={tweet} className={props.className} />\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetsComponent} from \"./tweets\";\n\n\nfunction App() {\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                <p>\n                    Edit <code>src/App.js</code> and save to reload.\n                </p>\n                <div>\n                    <TweetsComponent />\n                </div>\n                <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Learn React\n                </a>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetsComponent, TweetDetailComponent} from \"./tweets\";\nimport * as serviceWorker from './serviceWorker';\n\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n    ReactDOM.render(<App/>, appEl);\n}\nconst e = React.createElement\nconst tweetsEl = document.getElementById(\"tweetme-2\")\nif (tweetsEl) {\n    ReactDOM.render(e(TweetsComponent, tweetsEl.dataset), tweetsEl);\n}\n\nconst tweetDetailElements = document.querySelectorAll(\".tweetme-2-detail\")\n\ntweetDetailElements.forEach(container => {\n    ReactDOM.render(e(TweetDetailComponent, container.dataset), container);\n\n})\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}